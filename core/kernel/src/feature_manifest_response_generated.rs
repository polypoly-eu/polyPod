// automatically generated by the FlatBuffers compiler, do not modify



use crate::failure_generated::*;
use crate::feature_manifest_generated::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod feature_manifest_response {

  use crate::failure_generated::*;
  use crate::feature_manifest_generated::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_FEATURE_MANIFEST_PARSING_RESULT: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_FEATURE_MANIFEST_PARSING_RESULT: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_FEATURE_MANIFEST_PARSING_RESULT: [FeatureManifestParsingResult; 3] = [
  FeatureManifestParsingResult::NONE,
  FeatureManifestParsingResult::feature_manifest_FeatureManifest,
  FeatureManifestParsingResult::failure_Failure,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct FeatureManifestParsingResult(pub u8);
#[allow(non_upper_case_globals)]
impl FeatureManifestParsingResult {
  pub const NONE: Self = Self(0);
  pub const feature_manifest_FeatureManifest: Self = Self(1);
  pub const failure_Failure: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::feature_manifest_FeatureManifest,
    Self::failure_Failure,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::feature_manifest_FeatureManifest => Some("feature_manifest_FeatureManifest"),
      Self::failure_Failure => Some("failure_Failure"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for FeatureManifestParsingResult {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for FeatureManifestParsingResult {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for FeatureManifestParsingResult {
    type Output = FeatureManifestParsingResult;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for FeatureManifestParsingResult {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for FeatureManifestParsingResult {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for FeatureManifestParsingResult {}
pub struct FeatureManifestParsingResultUnionTableOffset {}

pub enum FeatureManifestParsingResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FeatureManifestParsingResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FeatureManifestParsingResponse<'a> {
  type Inner = FeatureManifestParsingResponse<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> FeatureManifestParsingResponse<'a> {
  pub const VT_RESULT_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_RESULT: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FeatureManifestParsingResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FeatureManifestParsingResponseArgs
  ) -> flatbuffers::WIPOffset<FeatureManifestParsingResponse<'bldr>> {
    let mut builder = FeatureManifestParsingResponseBuilder::new(_fbb);
    if let Some(x) = args.result { builder.add_result(x); }
    builder.add_result_type(args.result_type);
    builder.finish()
  }


  #[inline]
  pub fn result_type(&self) -> FeatureManifestParsingResult {
    self._tab.get::<FeatureManifestParsingResult>(FeatureManifestParsingResponse::VT_RESULT_TYPE, Some(FeatureManifestParsingResult::NONE)).unwrap()
  }
  #[inline]
  pub fn result(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(FeatureManifestParsingResponse::VT_RESULT, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn result_as_feature_manifest_feature_manifest(&self) -> Option<super::feature_manifest::FeatureManifest<'a>> {
    if self.result_type() == FeatureManifestParsingResult::feature_manifest_FeatureManifest {
      self.result().map(super::feature_manifest::FeatureManifest::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn result_as_failure_failure(&self) -> Option<super::failure::Failure<'a>> {
    if self.result_type() == FeatureManifestParsingResult::failure_Failure {
      self.result().map(super::failure::Failure::init_from_table)
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for FeatureManifestParsingResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<FeatureManifestParsingResult, _>("result_type", Self::VT_RESULT_TYPE, "result", Self::VT_RESULT, false, |key, v, pos| {
        match key {
          FeatureManifestParsingResult::feature_manifest_FeatureManifest => v.verify_union_variant::<flatbuffers::ForwardsUOffset<super::feature_manifest::FeatureManifest>>("FeatureManifestParsingResult::feature_manifest_FeatureManifest", pos),
          FeatureManifestParsingResult::failure_Failure => v.verify_union_variant::<flatbuffers::ForwardsUOffset<super::failure::Failure>>("FeatureManifestParsingResult::failure_Failure", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct FeatureManifestParsingResponseArgs {
    pub result_type: FeatureManifestParsingResult,
    pub result: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for FeatureManifestParsingResponseArgs {
  #[inline]
  fn default() -> Self {
    FeatureManifestParsingResponseArgs {
      result_type: FeatureManifestParsingResult::NONE,
      result: None,
    }
  }
}

pub struct FeatureManifestParsingResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FeatureManifestParsingResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_result_type(&mut self, result_type: FeatureManifestParsingResult) {
    self.fbb_.push_slot::<FeatureManifestParsingResult>(FeatureManifestParsingResponse::VT_RESULT_TYPE, result_type, FeatureManifestParsingResult::NONE);
  }
  #[inline]
  pub fn add_result(&mut self, result: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureManifestParsingResponse::VT_RESULT, result);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FeatureManifestParsingResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FeatureManifestParsingResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FeatureManifestParsingResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for FeatureManifestParsingResponse<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("FeatureManifestParsingResponse");
      ds.field("result_type", &self.result_type());
      match self.result_type() {
        FeatureManifestParsingResult::feature_manifest_FeatureManifest => {
          if let Some(x) = self.result_as_feature_manifest_feature_manifest() {
            ds.field("result", &x)
          } else {
            ds.field("result", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        FeatureManifestParsingResult::failure_Failure => {
          if let Some(x) = self.result_as_failure_failure() {
            ds.field("result", &x)
          } else {
            ds.field("result", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("result", &x)
        },
      };
      ds.finish()
  }
}
}  // pub mod feature_manifest_response

