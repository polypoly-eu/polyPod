// automatically generated by the FlatBuffers compiler, do not modify



use crate::flatbuffers_generated::failure_generated::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod kernel_bootstrap_response {

  use crate::flatbuffers_generated::failure_generated::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum KernelBootstrapResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Kernel bootstrap response represented by an optional failure.
/// If failure is nil, the bootstrap was successfull, otherwise it failed.
pub struct KernelBootstrapResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for KernelBootstrapResponse<'a> {
  type Inner = KernelBootstrapResponse<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> KernelBootstrapResponse<'a> {
  pub const VT_FAILURE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    KernelBootstrapResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args KernelBootstrapResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<KernelBootstrapResponse<'bldr>> {
    let mut builder = KernelBootstrapResponseBuilder::new(_fbb);
    if let Some(x) = args.failure { builder.add_failure(x); }
    builder.finish()
  }


  #[inline]
  pub fn failure(&self) -> Option<super::failure::Failure<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<super::failure::Failure>>(KernelBootstrapResponse::VT_FAILURE, None)
  }
}

impl flatbuffers::Verifiable for KernelBootstrapResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::failure::Failure>>("failure", Self::VT_FAILURE, false)?
     .finish();
    Ok(())
  }
}
pub struct KernelBootstrapResponseArgs<'a> {
    pub failure: Option<flatbuffers::WIPOffset<super::failure::Failure<'a>>>,
}
impl<'a> Default for KernelBootstrapResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    KernelBootstrapResponseArgs {
      failure: None,
    }
  }
}

pub struct KernelBootstrapResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> KernelBootstrapResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_failure(&mut self, failure: flatbuffers::WIPOffset<super::failure::Failure<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::failure::Failure>>(KernelBootstrapResponse::VT_FAILURE, failure);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> KernelBootstrapResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    KernelBootstrapResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<KernelBootstrapResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for KernelBootstrapResponse<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("KernelBootstrapResponse");
      ds.field("failure", &self.failure());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_kernel_bootstrap_response<'a>(buf: &'a [u8]) -> KernelBootstrapResponse<'a> {
  unsafe { flatbuffers::root_unchecked::<KernelBootstrapResponse<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_kernel_bootstrap_response<'a>(buf: &'a [u8]) -> KernelBootstrapResponse<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<KernelBootstrapResponse<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `KernelBootstrapResponse`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_kernel_bootstrap_response_unchecked`.
pub fn root_as_kernel_bootstrap_response(buf: &[u8]) -> Result<KernelBootstrapResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<KernelBootstrapResponse>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `KernelBootstrapResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_kernel_bootstrap_response_unchecked`.
pub fn size_prefixed_root_as_kernel_bootstrap_response(buf: &[u8]) -> Result<KernelBootstrapResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<KernelBootstrapResponse>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `KernelBootstrapResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_kernel_bootstrap_response_unchecked`.
pub fn root_as_kernel_bootstrap_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<KernelBootstrapResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<KernelBootstrapResponse<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `KernelBootstrapResponse` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_kernel_bootstrap_response_unchecked`.
pub fn size_prefixed_root_as_kernel_bootstrap_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<KernelBootstrapResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<KernelBootstrapResponse<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a KernelBootstrapResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `KernelBootstrapResponse`.
pub unsafe fn root_as_kernel_bootstrap_response_unchecked(buf: &[u8]) -> KernelBootstrapResponse {
  flatbuffers::root_unchecked::<KernelBootstrapResponse>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed KernelBootstrapResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `KernelBootstrapResponse`.
pub unsafe fn size_prefixed_root_as_kernel_bootstrap_response_unchecked(buf: &[u8]) -> KernelBootstrapResponse {
  flatbuffers::size_prefixed_root_unchecked::<KernelBootstrapResponse>(buf)
}
#[inline]
pub fn finish_kernel_bootstrap_response_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<KernelBootstrapResponse<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_kernel_bootstrap_response_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<KernelBootstrapResponse<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod kernel_bootstrap_response

