// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod feature_manifest {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum LinkOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Link<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Link<'a> {
  type Inner = Link<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Link<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_URL: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Link { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args LinkArgs<'args>
  ) -> flatbuffers::WIPOffset<Link<'bldr>> {
    let mut builder = LinkBuilder::new(_fbb);
    if let Some(x) = args.url { builder.add_url(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Link::VT_NAME, None)
  }
  #[inline]
  pub fn url(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Link::VT_URL, None)
  }
}

impl flatbuffers::Verifiable for Link<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("url", Self::VT_URL, false)?
     .finish();
    Ok(())
  }
}
pub struct LinkArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub url: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LinkArgs<'a> {
  #[inline]
  fn default() -> Self {
    LinkArgs {
      name: None,
      url: None,
    }
  }
}

pub struct LinkBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LinkBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Link::VT_NAME, name);
  }
  #[inline]
  pub fn add_url(&mut self, url: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Link::VT_URL, url);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LinkBuilder<'a, 'b> {
    let start = _fbb.start_table();
    LinkBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Link<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Link<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Link");
      ds.field("name", &self.name());
      ds.field("url", &self.url());
      ds.finish()
  }
}
pub enum FeatureManifestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FeatureManifest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FeatureManifest<'a> {
  type Inner = FeatureManifest<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> FeatureManifest<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_AUTHOR: flatbuffers::VOffsetT = 6;
  pub const VT_VERSION: flatbuffers::VOffsetT = 8;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 10;
  pub const VT_THUMBNAIL: flatbuffers::VOffsetT = 12;
  pub const VT_THUMBNAIL_COLOR: flatbuffers::VOffsetT = 14;
  pub const VT_PRIMARY_COLOR: flatbuffers::VOffsetT = 16;
  pub const VT_LINKS: flatbuffers::VOffsetT = 18;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FeatureManifest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FeatureManifestArgs<'args>
  ) -> flatbuffers::WIPOffset<FeatureManifest<'bldr>> {
    let mut builder = FeatureManifestBuilder::new(_fbb);
    if let Some(x) = args.links { builder.add_links(x); }
    if let Some(x) = args.primary_color { builder.add_primary_color(x); }
    if let Some(x) = args.thumbnail_color { builder.add_thumbnail_color(x); }
    if let Some(x) = args.thumbnail { builder.add_thumbnail(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.version { builder.add_version(x); }
    if let Some(x) = args.author { builder.add_author(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FeatureManifest::VT_NAME, None)
  }
  #[inline]
  pub fn author(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FeatureManifest::VT_AUTHOR, None)
  }
  #[inline]
  pub fn version(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FeatureManifest::VT_VERSION, None)
  }
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FeatureManifest::VT_DESCRIPTION, None)
  }
  #[inline]
  pub fn thumbnail(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FeatureManifest::VT_THUMBNAIL, None)
  }
  #[inline]
  pub fn thumbnail_color(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FeatureManifest::VT_THUMBNAIL_COLOR, None)
  }
  #[inline]
  pub fn primary_color(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FeatureManifest::VT_PRIMARY_COLOR, None)
  }
  #[inline]
  pub fn links(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Link<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Link>>>>(FeatureManifest::VT_LINKS, None)
  }
}

impl flatbuffers::Verifiable for FeatureManifest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("author", Self::VT_AUTHOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("version", Self::VT_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("thumbnail", Self::VT_THUMBNAIL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("thumbnail_color", Self::VT_THUMBNAIL_COLOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("primary_color", Self::VT_PRIMARY_COLOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Link>>>>("links", Self::VT_LINKS, false)?
     .finish();
    Ok(())
  }
}
pub struct FeatureManifestArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub author: Option<flatbuffers::WIPOffset<&'a str>>,
    pub version: Option<flatbuffers::WIPOffset<&'a str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub thumbnail: Option<flatbuffers::WIPOffset<&'a str>>,
    pub thumbnail_color: Option<flatbuffers::WIPOffset<&'a str>>,
    pub primary_color: Option<flatbuffers::WIPOffset<&'a str>>,
    pub links: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Link<'a>>>>>,
}
impl<'a> Default for FeatureManifestArgs<'a> {
  #[inline]
  fn default() -> Self {
    FeatureManifestArgs {
      name: None,
      author: None,
      version: None,
      description: None,
      thumbnail: None,
      thumbnail_color: None,
      primary_color: None,
      links: None,
    }
  }
}

pub struct FeatureManifestBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FeatureManifestBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureManifest::VT_NAME, name);
  }
  #[inline]
  pub fn add_author(&mut self, author: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureManifest::VT_AUTHOR, author);
  }
  #[inline]
  pub fn add_version(&mut self, version: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureManifest::VT_VERSION, version);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureManifest::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_thumbnail(&mut self, thumbnail: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureManifest::VT_THUMBNAIL, thumbnail);
  }
  #[inline]
  pub fn add_thumbnail_color(&mut self, thumbnail_color: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureManifest::VT_THUMBNAIL_COLOR, thumbnail_color);
  }
  #[inline]
  pub fn add_primary_color(&mut self, primary_color: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureManifest::VT_PRIMARY_COLOR, primary_color);
  }
  #[inline]
  pub fn add_links(&mut self, links: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Link<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FeatureManifest::VT_LINKS, links);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FeatureManifestBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FeatureManifestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FeatureManifest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for FeatureManifest<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("FeatureManifest");
      ds.field("name", &self.name());
      ds.field("author", &self.author());
      ds.field("version", &self.version());
      ds.field("description", &self.description());
      ds.field("thumbnail", &self.thumbnail());
      ds.field("thumbnail_color", &self.thumbnail_color());
      ds.field("primary_color", &self.primary_color());
      ds.field("links", &self.links());
      ds.finish()
  }
}
}  // pub mod feature_manifest

