plugins {
    id 'name.remal.check-dependency-updates' version '1.0.211'  // and run "checkDependencyUpdates" task
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'androidx.navigation.safeargs'
}

static def polyEpoch() {
    // Seconds since 2019-05-04 00:00 UTC - to avoid the year 2038 problem.
    def now = new Date()
    def polypolyFounding = new Date(119, 4, 4)
    return (int) Math.floor((now.getTime() - polypolyFounding.getTime()) / 1000)
}

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "coop.polypoly.polypod"
        minSdkVersion 24 // as long as we use the system WebView, going lower would mean a lot of limitations for feature developers
        targetSdkVersion 29 // cannot use 30 because of Robolectric's lack of support for that, see https://github.com/robolectric/robolectric/issues/5644
        versionCode polyEpoch()
        versionName "0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        if (project.hasProperty("sign")) {
            playStoreUpload {
                storeFile file(String.valueOf(System.getenv("POLYPOD_ANDROID_UPLOAD_KEYSTORE_FILE")))
                storePassword System.getenv("POLYPOD_ANDROID_UPLOAD_KEYSTORE_PASS")
                keyAlias System.getenv("POLYPOD_ANDROID_UPLOAD_KEY_ALIAS")
                keyPassword System.getenv("POLYPOD_ANDROID_UPLOAD_KEYSTORE_PASS")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            if (project.hasProperty("sign")) {
                signingConfig signingConfigs.playStoreUpload
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    sourceSets {
        main {
            assets.srcDirs += file('build/generated-assets')
            java.srcDirs += file('src/main/kotlin')
        }
        test {
            java.srcDirs += file('src/test/kotlin')
        }
        androidTest {
            java.srcDirs += file('src/androidTest/kotlin')
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                systemProperty 'robolectric.logging.enabled', 'true'
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

dependencies {
    implementation project(":bubblewrap")
    implementation project(":polyOut")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation "androidx.webkit:webkit:1.3.0"
    implementation "androidx.preference:preference:1.1.1"
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'com.synnapps:carouselview:0.1.5'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation group: 'org.apache.jena', name: 'jena-core', version: '3.17.0'

    // this unfortunately is needed to test the app
    debugImplementation 'androidx.test:core:1.3.0'
    debugImplementation 'androidx.fragment:fragment-testing:1.2.5'

    // dependencies for tests that do not require Android device/emulator running
    testImplementation 'junit:junit:4.13'   // yuck...
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'androidx.test:runner:1.3.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    testImplementation 'androidx.test:runner:1.3.0'
    testImplementation 'androidx.test:rules:1.3.0'
    testImplementation 'androidx.test.espresso:espresso-web:3.3.0'
    testImplementation 'com.google.truth:truth:1.0.1'
    testImplementation 'com.google.truth.extensions:truth-java8-extension:1.0.1'
    // fragment-testing requires entry with 'debugImplementation' scope, but also with 'testImplementation'
    // linter tells more (hence ignoring FragmentGradleConfiguration linter option)
    //noinspection FragmentGradleConfiguration
    testImplementation 'androidx.fragment:fragment-testing:1.2.5'
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.30'

    // instrumented tests dependencies
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'com.google.truth:truth:1.0.1'
    androidTestImplementation 'com.google.truth.extensions:truth-java8-extension:1.0.1'
    // fragment-testing requires entry with 'debugImplementation' scope, but also with 'androidTestImplementation'
    // linter tells more (hence ignoring FragmentGradleConfiguration linter option)
    //noinspection FragmentGradleConfiguration
    androidTestImplementation 'androidx.fragment:fragment-testing:1.2.5'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.3.0'
}

task copyFeatureContainerBootstrap(type: Copy) {
    from "../../core/podigree/dist/bootstrap.js"
    rename "bootstrap.js", "pod.js"
    into "build/generated-assets/container/"
}

task packageAndCopyBundledFeatures

["polyExplorer", "polyPreview"].each { featureName ->
    def taskName = "packageAndCopyFeature_$featureName"
    task "$taskName"(type: Zip) {
        archiveFileName = "${featureName}.zip"
        destinationDirectory = file("$buildDir/generated-assets/features")
        from "$projectDir/../../features/$featureName/dist"
    }
    packageAndCopyBundledFeatures.dependsOn "$taskName"
}

task packageTestFeature(type: Zip) {
    archiveFileName = "test.zip"
    destinationDirectory = file("$buildDir")
    from "$projectDir/../../features/test/dist"
}

task copyTestFeatureOntoDevice {
    dependsOn packageTestFeature
    def adb = android.getAdbExecutable().absolutePath
    def tempPath = "/data/local/tmp/test.zip"
    def packageName = android.defaultConfig.applicationId
    def featurePath = "files/features"
    doLast {
        exec {
            commandLine adb, 'push', "--sync", "$buildDir/test.zip", tempPath
            logger.info("test feature copied onto the device")
        }
        exec {
            commandLine adb, 'shell', "run-as", packageName, "mkdir", '-p', featurePath
            logger.info("Feature directory created on the device")
        }
        exec {
            commandLine adb, 'shell', "run-as", packageName, "cp", tempPath, featurePath
            logger.info("test feature moved to features directory on the device")
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets" || task.name == "generateReleaseAssets") {
        task.dependsOn copyFeatureContainerBootstrap
        task.dependsOn packageAndCopyBundledFeatures
    }
    if (task.name == "connectedDebugAndroidTest" || task.name == "connectedReleaseAndroidTest")
        task.dependsOn copyTestFeatureOntoDevice
}
